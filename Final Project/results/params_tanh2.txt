def main():

	# Style Attributes
	content_layer = {'34': 'conv5_4'}
	# content_layer = {'2': 'conv1_2'}
	style_layers = {'0': 'conv1_1',
				  '5': 'conv2_1',
				  '10': 'conv3_1',
				  '19': 'conv4_1',
				  '28': 'conv5_1'}

	s_weights = {'conv1_1': 1.5,
				 'conv2_1': 0.80,
				 'conv3_1': 0.25,
				 'conv4_1': 0.25,
				 'conv5_1': 0.25}


	# ====================== HARDCODE THESE COMBINATIONS!!!!! =======================

	# Overall Loss Style vs. Content Weights
	c_weight = 1e6
	s_weight = 1e3
	color_weight = 1

	# Transform settings
	trf = T.Compose([T.Resize(600),
					T.ToTensor(),
					T.Normalize(mean=[0.485, 0.456, 0.406],
								std=[0.229, 0.224, 0.225])])


	# General Model
	epochs = 1000
	leaky = 0
	tanh = 1

	# Training loop
	# a = [0.3, 0.15, 0.08, 0.00]
	a = [0.3]
	for slope in a:

		model = models.vgg19(pretrained=True).features

		# Alter Architecture of pretrained model (only non-trainable layers)
		layers = []
		for name, layer in model.named_children():
			if isinstance(layer, nn.MaxPool2d):
				layers.append(nn.AvgPool2d(kernel_size=2, stride=2, ceil_mode=False))
			elif isinstance(layer, nn.ReLU) & (leaky == True):
				layers.append(nn.LeakyReLU(slope))
			elif isinstance(layer, nn.ReLU) & (tanh == True):
				layers.append(nn.Tanh())
			else:
				layers.append(layer)
